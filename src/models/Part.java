package models;

import java.util.Observable;
import java.util.UUID;
import database.GatewayException;
import database.PartTableGateway;

public class Part extends Observable {
	
	/**
	 * validation error messages
	 */
	public static final String ERRORMSG_INVALID_ID = "Invalid id!";
	public static final String ERRORMSG_INVALID_PARTNUMBER = "Invalid Part Number!";
	public static final String ERRORMSG_INVALID_PARTNAME = "Invalid Part Name!";
	public static final String ERRORMSG_INVALID_VENDORNAME = "Invalid Vendor Name!";
	public static final String ERRORMSG_INVALID_QUANTIYUNITY = "Invalid Quantity Unit!";
	public static final String ERRORMSG_INVALID_VENDORPARTUMBER = "Invalid Vendor Part Number!";
	public static final String DEFAULT_EMPTY_NAME = "Unknown";
	public static final int INVALID_ID = 0;

	/*
	 * Unique id of parts records
	 * automatically generated by database
	 * 
	 */
	
	private long id;
	
	/*
	 * MaxLength:20
	 * Must be unique
	 * Cannot be null or blank
	 */
	private String partNumber;
	
	
	
	/* 
	 * MaxLength:255
	 * Cannot be null or blank
	 * 
	 */
	private String partName;
	
	
	/*
	 * MaxLength:255
	 * Cannot be null 
	 * (Not Required)
	 */
	private String vendorName;
	
	
	/*
	 * Unit of Quantity
	 * (Linear Ft.)  or (Pieces)
	 */
	
	private String quantityUnit;
	
	
	/*
	 * MaxLength:255
	 * Cannot be null
	 */
	private String vendorPartNumber; 
	
	private PartTableGateway gateway;
	
	public String [] unit = {"Linear Ft." , "Pieces"};
	
	public Part() {
		id = INVALID_ID;
		partNumber = "";
		partName = "";
		vendorName = "";
		quantityUnit = "";
		vendorPartNumber = ""; 
		
	}
	
	 public Part(long id, String pnum, String pname, String vname, String Unit, String vnpnum) { 
		
		  this();
		  if(id < 1)
			  throw new IllegalArgumentException(ERRORMSG_INVALID_ID);
		  if(!validPartNumber(pnum))
			  throw new IllegalArgumentException(ERRORMSG_INVALID_PARTNUMBER);
		  if(!validPartName(pname))
			  throw new IllegalArgumentException(ERRORMSG_INVALID_PARTNAME);
		  if(!validVendor(vname))
			  throw new IllegalArgumentException(ERRORMSG_INVALID_VENDORNAME);
		  if(!validVendorPart(vnpnum))
			  throw new IllegalArgumentException(ERRORMSG_INVALID_VENDORPARTUMBER);
		
			  
		/*
		this.id = id;
		this.partNumber = pnum;
		this.partName = pname;
		this.vendorName = vname;
		this.quantityUnit = qu;
		this.vendorPartNumber = vnpnum;*/
		//id = id;
		setId(id);
		partNumber = pnum;
		partName = pname;
		vendorPartNumber = vnpnum;
		vendorName  = vname;
		quantityUnit = (Unit.equals(unit[0])) ?unit[0] : unit[1];
		vendorPartNumber = vnpnum;
		
	}
	
	/**
	 * Tells the model that update has finished so it can finish the update
	 * E.g., notify observers
	 */
	public void finishUpdate() throws GatewayException {
		Part orig = null;

		try {
			//if id is 0 then this is a new PART to insert, else its an update
			if(this.getId() == 0) {
				this.setId(gateway.insertPart(this));
				
			} else {
				//fetch part from db table in case this fails
			
				orig = gateway.fetchPart(this.getId());
		
				//try to save to the database
				gateway.savePart(this);

			}
			
			//if gateway ok then notify observers
			notifyObservers();
			
		} catch(GatewayException e) {
			//if fails then try to refetch model fields from the database
			if(orig != null) {
				//this.setId(orig.getId());
				this.setPartNumber(orig.getPartNumber());
				this.setPartName(orig.getPartName());
				this.setVendorName(orig.getVendorName());
				this.setQuantityUnit(orig.getQuantityUnit());
				this.setVendorPartNumber(orig.getVendorPartNumber());
				
			}
			throw new GatewayException("Error trying to save the Part object!");
		}
	}

	/**
	 * delete this object through the gateway (i.e., db)
	 */
	public void delete() throws GatewayException {
		//if id is 0 then nothing to do in the gateway (record has not been saved yet)
		if(this.getId() == 0) 
			return;
			try {
				gateway.deletePart(this.getId());
			} catch (GatewayException e) {
				throw new GatewayException(e.getMessage());
			}
	}
	
	

	/**
	 * valid part name must not be null, and be > 0 length and <= 255 length
	 * @param pn part name to test for validity
	 * @return true if part name is valid, else false
	 */
	public boolean validPartName(String pn) {
		if(pn == null)
			return false;
		String test = pn.trim(); 
		if(test.length() > 255)
			return false;
		if(test.length() == 0)
			return false;
		return true;
	}
	
	public boolean validPartNumber(String pn) {
		if(pn == null)
			return false;
		String test = pn.trim(); 
		if(test.length() > 255)
			return false;
		if(test.length() == 0)
			return false;
		return true;
	}
	
	public boolean validVendor(String v) {
		if(v == null)
			return false;
		String test = v.trim(); 
		if(test.length() > 255)
			return false;
		return true;
	}
	
	
	/*
	 * linear ft. or pieces
	 */
/*	public boolean validUnit(String u) {
		if(!u.equals("Linear Ft.") || u.equals("Pieces"))
			return false;
		return true; 
	}  */
	
	public boolean validVendorPart(String vp) {
		if(vp == null)
			return false;
		String test = vp.trim(); 
		if(test.length() > 255)
			return false;
		return true;
	}
	
	

	
	
	
	/**
	 * Default string output of Part
	 */
	@Override
	public String toString() {
		String ret = " Part #: " + partNumber;
		ret += " Name: " + partName;
		ret += " Vendor: " + vendorName;
		ret += " Unit: " + quantityUnit;
		ret += " Vendor Number: " + vendorPartNumber;
		ret += " Id: " + id;
		
		return ret;
			
	}

	
	
	public long getId() {
		return id;
	}

	public void setId(long id) {
		this.id = id;
	}

	public String getPartName() {
		return partName;
	}

	public void setPartName(String partName) {
		this.partName = partName;
		//get ready to notify observers (notify is called in finishUpdate())
		setChanged();
	}
	
	public String getPartNumber() {
		return partNumber;
	}
	
	
	public void setPartNumber(String partNumber) {
		this.partNumber = partNumber;
		setChanged();
	}
	
	public String getVendorName() {
		return vendorName;
	}
	
	public void setVendorName(String vendorName) {
		this.vendorName = vendorName;
		setChanged();
	}
	
	public boolean validPartUnit(String unit) {
		if (unit == null)
			return false;
		unit = unit.trim();
				if((unit.toLowerCase().equals("linear ft")) || (unit.toLowerCase().equals("pieces")))
					return true;
				else {
					return false;
				}
	}
	public String getQuantityUnit() {
		return quantityUnit;
	}
	
	public void setQuantityUnit(String quantityUnit) {
		this.quantityUnit = quantityUnit; 
		setChanged();
	}
	
	public String getVendorPartNumber() {
		return vendorPartNumber;
	}
	
	public void setVendorPartNumber(String vendorPartNumber) {
		this.vendorPartNumber = vendorPartNumber;
		setChanged();
	}

	
	public PartTableGateway getGateway() {
		return gateway;
	}

	public void setGateway(PartTableGateway gateway) {
		this.gateway = gateway;
	}
	
	
	
	
	
}
